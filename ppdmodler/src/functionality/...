#!/usr/bin/env python3

"""Test file for a multidimensional Gaussian fit with MCMC; The emcee
package"""

import numpy as np
import emcee
import matplotlib.pyplot as plt

# Logarithm of p -> log_prob
def log_prob(p):
    """The Logaritm of p

    Parameters
    ----------
    p: List[int | float]
        The density p. A list of walkers from which a singular one is extracted

    Returns
    -------
    """
    ...

# Sets the steps of the burn-in and the max. steps
steps_bi, steps = 100, 10000

# The number of walkers and the dimensions
nwalkers, ndim = 0, 0

# This vector defines the starting points of each walker for the amount of
# dimensions
p0 = np.random.rand(nwalkers, ndim)

# The EnsambleSampler gets the parameters. The args are the args put into the
# lob_prob function
sampler = emcee.EnsembleSampler(nwalkers, ndim, log_prob, args=[])

# Burn-in of the sampler. Explores the parameter space. The walkers get settled
# into the maximum of the density. Saves the walkers in the state variable
state = sampler.run_mcmc(p0, steps_bi)

# Resets all the samplers values
sampler.reset()

# Do production
sampler.run_mcmc(p0, steps)

# This gets the parameter values for every walker at each step in the chain.
# Array of shape (steps, nwalkers, ndim)
samples = sampler.get_chain(flat=True)

# Plot the samples to get estimate of the density that has been sampled, to
# test if sampling went well
plt.hist(samples[:, 0], 100, color='k', histtype="step")
plt.xlabel(r"$\theta_1$")
plt.ylabel(r"$p(\theta_1)$")
plt.gca().set_yticks([]);


